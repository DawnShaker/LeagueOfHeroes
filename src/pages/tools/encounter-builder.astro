---
import Layout from '../../layouts/Layout.astro';

interface XPBudget {
  level: number;
  low: number;
  moderate: number;
  high: number;
}

interface CRXPValue {
  cr: string;
  xp: number;
}

const xpBudgets: XPBudget[] = [
  { level: 1, low: 50, moderate: 75, high: 100 },
  { level: 2, low: 100, moderate: 150, high: 200 },
  { level: 3, low: 150, moderate: 225, high: 400 },
  { level: 4, low: 250, moderate: 375, high: 500 },
  { level: 5, low: 500, moderate: 750, high: 1100 },
  { level: 6, low: 600, moderate: 1000, high: 1400 },
  { level: 7, low: 750, moderate: 1300, high: 1700 },
  { level: 8, low: 1000, moderate: 1700, high: 2100 },
  { level: 9, low: 1300, moderate: 2000, high: 2600 },
  { level: 10, low: 1600, moderate: 2300, high: 3100 },
  { level: 11, low: 1900, moderate: 2900, high: 4100 },
  { level: 12, low: 2200, moderate: 3700, high: 4700 },
  { level: 13, low: 2600, moderate: 4200, high: 5400 },
  { level: 14, low: 2900, moderate: 4900, high: 6200 },
  { level: 15, low: 3300, moderate: 5400, high: 7800 },
  { level: 16, low: 3800, moderate: 6100, high: 9800 },
  { level: 17, low: 4500, moderate: 7200, high: 11700 },
  { level: 18, low: 5000, moderate: 8700, high: 14200 },
  { level: 19, low: 5500, moderate: 10700, high: 17200 },
  { level: 20, low: 6400, moderate: 13200, high: 22000 }
];

const crXPValues: CRXPValue[] = [
  { cr: "0", xp: 10 },
  { cr: "1/8", xp: 25 },
  { cr: "1/4", xp: 50 },
  { cr: "1/2", xp: 100 },
  { cr: "1", xp: 200 },
  { cr: "2", xp: 450 },
  { cr: "3", xp: 700 },
  { cr: "4", xp: 1100 },
  { cr: "5", xp: 1800 },
  { cr: "6", xp: 2300 },
  { cr: "7", xp: 2900 },
  { cr: "8", xp: 3900 },
  { cr: "9", xp: 5000 },
  { cr: "10", xp: 5900 },
  { cr: "11", xp: 7200 },
  { cr: "12", xp: 8400 },
  { cr: "13", xp: 10000 },
  { cr: "14", xp: 11500 },
  { cr: "15", xp: 13000 },
  { cr: "16", xp: 15000 },
  { cr: "17", xp: 18000 },
  { cr: "18", xp: 20000 },
  { cr: "19", xp: 22000 },
  { cr: "20", xp: 25000 },
  { cr: "21", xp: 33000 },
  { cr: "22", xp: 41000 },
  { cr: "23", xp: 50000 },
  { cr: "24", xp: 62000 },
  { cr: "25", xp: 75000 },
  { cr: "26", xp: 90000 },
  { cr: "27", xp: 105000 },
  { cr: "28", xp: 120000 },
  { cr: "29", xp: 135000 },
  { cr: "30", xp: 155000 }
];
---

<Layout title="D&D 5E Guide - Генератор столкновений">
  <div class="content">
    <h1>Генератор столкновений</h1>

    <div class="calculator-grid">
      <!-- Characters Section -->
      <div class="characters-section">
        <h2>Персонажи</h2>
        <div class="character-inputs">
          <div class="input-group">
            <input type="number" id="char-count" placeholder="Кол-во" min="1" class="number-input">
            <input type="number" id="char-level" placeholder="Уровень" min="1" max="20" class="number-input">
            <button class="add-btn" id="add-character">+</button>
          </div>
        </div>
        <div id="character-list" class="character-list"></div>
        <div class="party-info">
          <p>Средний уровень: <span id="avg-level">-</span></p>
        </div>

        <div class="difficulty-thresholds">
          <h3>Пороговые значения</h3>
          <div class="thresholds-grid">
            <div class="threshold">
              <span class="label">Низкая</span>
              <span id="low-threshold" class="value">-</span>
              <div id="low-per-character" class="per-character">-</div>
            </div>
            <div class="threshold">
              <span class="label">Средняя</span>
              <span id="moderate-threshold" class="value">-</span>
              <div id="moderate-per-character" class="per-character">-</div>
            </div>
            <div class="threshold">
              <span class="label">Высокая</span>
              <span id="high-threshold" class="value">-</span>
              <div id="high-per-character" class="per-character">-</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Encounter Section -->
      <div class="encounter-section">
        <h2>Противники</h2>
        <div class="monster-inputs">
          <div class="input-group">
            <input type="text" id="monster-name" placeholder="Монстр" class="text-input">
            <input type="text" id="monster-cr" placeholder="CR" class="number-input">
            <input type="number" id="monster-count" placeholder="Кол-во" min="1" class="number-input">
            <button class="add-btn" id="add-monster">+</button>
          </div>
        </div>
        <div id="monster-list" class="monster-list"></div>

        <div class="encounter-info">
          <h3>Параметры столкновения</h3>
          <p>Общая сложность: <span id="total-difficulty">-</span><span id="difficulty-multiplier"></span></p>
          <p>Общий опыт: <span id="total-xp">-</span></p>
          <p>Опыт на персонажа: <span id="xp-per-character">-</span></p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ xpBudgets, crXPValues }}>
  let characters = [];
  let monsters = [];

  function calculateAverageLevel() {
    if (characters.length === 0) return 0;
    const sum = characters.reduce((acc, char) => acc + (char.level * char.count), 0);
    const totalCount = characters.reduce((acc, char) => acc + char.count, 0);
    return Math.round(sum / totalCount);
  }

  function calculateThresholds() {
    const totalCharacters = characters.reduce((acc, char) => acc + char.count, 0);
    if (totalCharacters === 0) return { low: 0, moderate: 0, high: 0 };

    const thresholds = characters.reduce((acc, char) => {
      const budget = xpBudgets.find(b => b.level === char.level);
      if (budget) {
        acc.low += budget.low * char.count;
        acc.moderate += budget.moderate * char.count;
        acc.high += budget.high * char.count;
      }
      return acc;
    }, { low: 0, moderate: 0, high: 0 });

    return thresholds;
  }

  function getXPForCR(cr) {
    const crValue = crXPValues.find(x => x.cr === cr);
    return crValue ? crValue.xp : 0;
  }

  function calculateEncounterXP() {
    const totalXP = monsters.reduce((acc, monster) => {
      return acc + (getXPForCR(monster.cr) * monster.count);
    }, 0);
    const totalCharacters = characters.reduce((acc, char) => acc + char.count, 0);
    const adjustedXP = totalXP;
    const xpPerCharacter = totalCharacters > 0 ? Math.floor(totalXP / totalCharacters) : 0;

    return {
      baseXP: totalXP,
      adjustedXP,
      xpPerCharacter
    };
  }

  function getDifficulty(adjustedXP) {
    const thresholds = calculateThresholds();
    
    if (adjustedXP >= thresholds.high) return 'Высокая';
    if (adjustedXP >= thresholds.moderate) return 'Средняя';
    if (adjustedXP >= thresholds.low) return 'Низкая';
    return 'Тривиальная';
  }

  function updateUI() {
    // Update character info
    const avgLevel = calculateAverageLevel();
    document.getElementById('avg-level').textContent = avgLevel;

    // Update thresholds
    const thresholds = calculateThresholds();
    const totalCharacters = characters.reduce((acc, char) => acc + char.count, 0);
    document.getElementById('low-threshold').textContent = thresholds.low;
    document.getElementById('low-per-character').textContent = `${Math.floor(thresholds.low / totalCharacters)} на персонажа`;
    document.getElementById('moderate-threshold').textContent = thresholds.moderate;
    document.getElementById('moderate-per-character').textContent = `${Math.floor(thresholds.moderate / totalCharacters)} на персонажа`;
    document.getElementById('high-threshold').textContent = thresholds.high;
    document.getElementById('high-per-character').textContent = `${Math.floor(thresholds.high / totalCharacters)} на персонажа`;

    // Update encounter info
    const encounterXP = calculateEncounterXP();
    const highThreshold = thresholds.high;
    const multiplier = highThreshold > 0 ? encounterXP.adjustedXP / highThreshold : 0;
    // Round to nearest 0.5
    const roundedMultiplier = Math.round(multiplier * 2) / 2;

    document.getElementById('total-difficulty').textContent = getDifficulty(encounterXP.adjustedXP);
    document.getElementById('difficulty-multiplier').textContent = 
      roundedMultiplier >= 1.5 ? ` (${roundedMultiplier.toFixed(1)}× от высокой сложности)` : '';
    document.getElementById('total-xp').textContent = encounterXP.baseXP;
    document.getElementById('xp-per-character').textContent = encounterXP.xpPerCharacter;

    // Update lists
    updateCharacterList();
    updateMonsterList();
  }

  function updateCharacterList() {
    const list = document.getElementById('character-list');
    list.innerHTML = characters.map((char, index) => `
      <div class="list-item">
        <span>${char.count} персонажей ${char.level} уровня</span>
        <button class="remove-btn" onclick="removeCharacter(${index})">×</button>
      </div>
    `).join('');
  }

  function updateMonsterList() {
    const list = document.getElementById('monster-list');
    list.innerHTML = monsters.map((monster, index) => `
      <div class="list-item">
        <span>${monster.count}× ${monster.name} (CR ${monster.cr})</span>
        <button class="remove-btn" onclick="removeMonster(${index})">×</button>
      </div>
    `).join('');
  }

  function addCharacter() {
    const countInput = document.getElementById('char-count');
    const levelInput = document.getElementById('char-level');
    
    const count = parseInt(countInput.value);
    const level = parseInt(levelInput.value);

    if (count > 0 && level >= 1 && level <= 20) {
      characters.push({ count, level });
      countInput.value = '';
      levelInput.value = '';
      updateUI();
    }
  }

  function addMonster() {
    const nameInput = document.getElementById('monster-name');
    const crInput = document.getElementById('monster-cr');
    const countInput = document.getElementById('monster-count');
    
    const name = nameInput.value.trim();
    const cr = crInput.value.trim();
    const count = parseInt(countInput.value);

    if (name && cr && count > 0) {
      monsters.push({ name, cr, count });
      nameInput.value = '';
      crInput.value = '';
      countInput.value = '';
      updateUI();
    }
  }

  function removeCharacter(index) {
    characters.splice(index, 1);
    updateUI();
  }

  function removeMonster(index) {
    monsters.splice(index, 1);
    updateUI();
  }

  // Initialize event listeners
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('add-character')?.addEventListener('click', addCharacter);
    document.getElementById('add-monster')?.addEventListener('click', addMonster);
    
    // Make remove functions available globally
    window.removeCharacter = removeCharacter;
    window.removeMonster = removeMonster;
  });
</script>

<style>
  .content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .calculator-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .characters-section,
  .encounter-section {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: var(--card-shadow);
    border: 1px solid var(--card-border);
  }

  .input-group {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .text-input,
  .number-input {
    padding: 0.5rem;
    border: 1px solid var(--card-border);
    border-radius: 0.25rem;
    background: var(--background);
    color: var(--text);
  }

  .add-btn {
    padding: 0.5rem 1rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
  }

  .add-btn:hover {
    background: var(--primary-dark);
  }

  .list-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 0.5rem;
    background: var(--background);
    border-radius: 0.25rem;
    margin-bottom: 0.5rem;
  }

  .list-item .remove-btn {
    line-height: 1;
    height: 24px;
    width: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .remove-btn {
    background: none;
    border: none;
    color: var(--text);
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0 0.5rem;
  }

  .remove-btn:hover {
    color: #dc2626;
  }

  .difficulty-thresholds {
    margin-top: 2rem;
  }

  .thresholds-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 1rem;
  }

  .threshold {
    background: var(--background);
    padding: 1rem;
    border-radius: 0.25rem;
    text-align: center;
  }

  .threshold .per-character {
    font-size: 0.875rem;
    color: var(--text);
    opacity: 0.8;
    margin-top: 0.25rem;
  }

  .threshold .label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
  }

  .party-info,
  .encounter-info {
    margin-top: 2rem;
  }

  h2 {
    margin-bottom: 1rem;
  }

  h3 {
    margin: 1.5rem 0 1rem;
  }

  p {
    margin-bottom: 0.5rem;
  }
</style>