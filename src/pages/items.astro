---
import Layout from '../layouts/Layout.astro';
import { items } from '../data/items';

const sortedItems = [...items].sort((a, b) => 
  a.name.localeCompare(b.name, 'ru')
);
---

<Layout title="Предметы">
  <div class="content">
    <h1>Предметы</h1>
    
    <div class="items-container">
      <div id="items-data" data-items={JSON.stringify(items)} style="display: none;"></div>
      <div class="items-table">
        <div class="search-container">
          <input 
            type="text" 
            id="item-search" 
            placeholder="Поиск предметов..."
            class="search-input"
          />
        </div>

        <table>
          <thead>
            <tr>
              <th class="sortable" data-sort="name">
                Название
                <span class="sort-icon">↕</span>
              </th>
              <th class="sortable" data-sort="type">
                Тип
                <span class="sort-icon">↕</span>
              </th>
              <th class="sortable" data-sort="cost">
                Цена
                <span class="sort-icon">↕</span>
              </th>
              <th class="sortable" data-sort="weight">
                Вес
                <span class="sort-icon">↕</span>
              </th>
              <th class="sortable" data-sort="source">
                Источник
                <span class="sort-icon">↕</span>
              </th>
            </tr>
          </thead>
          <tbody>
            {sortedItems.map(item => (
              <tr class="item-row" data-item-id={item.id}>
                <td>
                  {item.name}
                  <span class="name-en">[{item.nameEn}]</span>
                </td>
                <td>{item.type}</td>
                <td>{item.cost}</td>
                <td>{item.weight}</td>
                <td>{item.sourceBook}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div id="item-details" class="item-details">
        <div class="details-content">
          <h2>Выберите предмет для просмотра</h2>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { parseCurrencyString, convertToGold } from '../utils/currency';

  function initializeItems() {
    const searchInput = document.getElementById('item-search') as HTMLInputElement;
    const itemRows = document.querySelectorAll('.item-row');
    const sortableHeaders = document.querySelectorAll('.sortable');
    const itemDetails = document.getElementById('item-details');
    const items = JSON.parse(document.getElementById('items-data')?.getAttribute('data-items') || '[]');
    let currentSort = { column: 'name', direction: 'asc' };

    function filterItems() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      
      itemRows.forEach(row => {
        const name = row.querySelector('td')?.textContent?.toLowerCase() || '';
        const isVisible = name.includes(searchTerm);
        (row as HTMLElement).style.display = isVisible ? '' : 'none';
      });
    }

    function sortItems(column: string) {
      const tbody = document.querySelector('tbody');
      const rows = Array.from(document.querySelectorAll('.item-row'));
      
      if (!tbody) return;
      
      // Update sort direction
      if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort = { column, direction: 'asc' };
      }
      
      // Update sort icons
      sortableHeaders.forEach(header => {
        const icon = header.querySelector('.sort-icon');
        if (!icon) return;
        
        if (header.getAttribute('data-sort') === column) {
          icon.textContent = currentSort.direction === 'asc' ? '↓' : '↑';
        } else {
          icon.textContent = '↕';
        }
      });
      
      // Sort rows
      rows.sort((a, b) => {
        let aValue = '';
        let bValue = '';
        
        switch(column) {
          case 'name':
            aValue = a.querySelector('td')?.textContent?.toLowerCase() || '';
            bValue = b.querySelector('td')?.textContent?.toLowerCase() || '';
            break;
          case 'type':
            aValue = a.querySelectorAll('td')[1]?.textContent?.toLowerCase() || '';
            bValue = b.querySelectorAll('td')[1]?.textContent?.toLowerCase() || '';
            break;
          case 'cost':
            const aCost = parseCurrencyString(a.querySelectorAll('td')[2]?.textContent || '');
            const bCost = parseCurrencyString(b.querySelectorAll('td')[2]?.textContent || '');
            return currentSort.direction === 'asc'
              ? convertToGold(aCost) - convertToGold(bCost)
              : convertToGold(bCost) - convertToGold(aCost);
            break;
          case 'weight':
            aValue = a.querySelectorAll('td')[3]?.textContent || '';
            bValue = b.querySelectorAll('td')[3]?.textContent || '';
            break;
          case 'source':
            aValue = a.querySelectorAll('td')[4]?.textContent || '';
            bValue = b.querySelectorAll('td')[4]?.textContent || '';
            break;
        }
        
        return currentSort.direction === 'asc' 
          ? aValue.localeCompare(bValue, 'ru')
          : bValue.localeCompare(aValue, 'ru');
      });
      
      // Reorder DOM
      rows.forEach(row => tbody.appendChild(row));
    }

    function showItemDetails(itemId: string) {
      if (!itemDetails) return;

      const item = items.find(i => i.id === itemId);
      if (!item) return;

      itemDetails.innerHTML = `
        <div class="details-content">
          <h2>${item.name} <span class="name-en">[${item.nameEn}]</span></h2>
          <div class="item-meta">
            <p><strong>Тип:</strong> ${item.type}</p>
            <p><strong>Цена:</strong> ${item.cost} 
              ${(() => {
                const cost = parseCurrencyString(item.cost);
                const goldValue = convertToGold(cost);
                return goldValue !== cost.amount || cost.unit !== 'зм' 
                  ? `(${goldValue} зм)` 
                  : '';
              })()}
            </p>
            <p><strong>Вес:</strong> ${item.weight}</p>
            <p><strong>Источник:</strong> ${item.sourceBook}</p>
          </div>
          <div class="item-description">
            ${item.description}
          </div>
        </div>
      `;

      // Add active class to selected row
      itemRows.forEach(row => row.classList.remove('active'));
      document.querySelector(`[data-item-id="${itemId}"]`)?.classList.add('active');
    }

    // Add sort event listeners
    sortableHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const column = header.getAttribute('data-sort');
        if (column) sortItems(column);
      });
    });

    searchInput?.addEventListener('input', filterItems);
    
    itemRows.forEach(row => {
      row.addEventListener('click', () => {
        const itemId = (row as HTMLElement).dataset.itemId;
        if (itemId) showItemDetails(itemId);
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initializeItems);
</script>

<style>
  .content {
    max-width: 1200px;
    margin: 0 auto;
  }

  .items-container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .search-container {
    margin-bottom: 1rem;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--card-border);
    border-radius: 0.5rem;
    background: var(--card-bg);
    color: var(--text);
  }

  .items-table {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: var(--card-shadow);
    border: 1px solid var(--card-border);
  }

  table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
  }

  th, td {
    padding: 0.75rem;
    border: 1px solid var(--card-border);
    text-align: left;
    height: 48px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  th:nth-child(1),
  td:nth-child(1) {
    width: 40%;
  }

  th:nth-child(2),
  td:nth-child(2) {
    width: 20%;
  }

  th:nth-child(3),
  td:nth-child(3) {
    width: 15%;
  }

  th:nth-child(4),
  td:nth-child(4) {
    width: 10%;
  }

  th:nth-child(5),
  td:nth-child(5) {
    width: 15%;
  }

  th {
    background: var(--background);
    font-weight: 600;
  }

  .sortable {
    cursor: pointer;
    user-select: none;
  }

  .sortable:hover {
    background: var(--nav-hover-bg);
  }

  .sort-icon {
    margin-left: 0.5rem;
    opacity: 0.5;
  }

  .item-row {
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .item-row:hover {
    background: var(--nav-hover-bg);
  }

  .item-row.active {
    background: var(--nav-hover-bg);
  }

  .name-en {
    color: var(--text);
    opacity: 0.7;
    font-size: 0.8em;
    margin-left: 0.5rem;
    white-space: nowrap;
  }

  .item-details {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: var(--card-shadow);
    border: 1px solid var(--card-border);
    position: sticky;
    top: 5rem;
    max-height: calc(100vh - 7rem);
    overflow-y: auto;
  }

  .details-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .item-meta {
    display: grid;
    gap: 0.5rem;
  }

  .item-description {
    line-height: 1.6;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--card-border);
  }
</style>


<style>
  .currency-info {
    margin-top: 2rem;
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: var(--card-shadow);
    border: 1px solid var(--card-border);
  }

  .currency-table {
    width: 100%;
    margin-top: 1rem;
    border-collapse: collapse;
  }

  .currency-table th,
  .currency-table td {
    padding: 0.75rem;
    border: 1px solid var(--card-border);
    text-align: left;
  }

  .currency-table th {
    background: var(--background);
    font-weight: 600;
  }
</style>