---
interface Props {
  levels: {
    level: number;
    profBonus: string;
    features: string[];
    rage?: number;
    rageDamage?: string;
    secondWind?: string;
    maneuvers?: string;
    bardicInspiration?: string;
    chanelDivinity: number;
    wildShape?: number;
    sneakAttack?: string;
    invocations?: number;
    cantrips?: number;
    preparedSpells?: number;
    martialArts?: string;
    spiritPoints?: string;
    unarmedMovement?: string;
    favoredEnemy?: number;
    sorceryPoints?: number;
    bloodMagicDie?: string;
    knownMaledicts?: number;
    numOfSpellSlots?: number;
    spellSlotsLvl?: number;
    spellSlots?: {
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
      9: number;
    };
  }[];
}
const { levels } = Astro.props;
const hasSpellcasting = levels[0].spellSlots !== undefined;
const hasBardicInspiration= levels[0].bardicInspiration !== undefined;
const hasPreparedSpells = levels[0].preparedSpells !== undefined;
const hasCantrips = levels[0].cantrips !== undefined;
const hasChanelDivinity= levels[0].chanelDivinity !== undefined;
const hasWildShape= levels[0].wildShape !== undefined;
const hasRage = levels[0].rage !== undefined;
const hasRageDamage = levels[0].rageDamage !== undefined;
const hasSecondWind = levels[0].secondWind !== undefined;
const hasManeuvers = levels[0].maneuvers !== undefined;
const hasSneakAttack = levels[0].sneakAttack !== undefined;
const hasMartialArts = levels[0].martialArts !== undefined;
const hasSpiritPoints = levels[0].spiritPoints !== undefined;
const hasUnarmedMovement = levels[0].unarmedMovement !== undefined;
const hasFavoredEnemy = levels[0].favoredEnemy !== undefined;
const hasSorceryPoints = levels[0].sorceryPoints !== undefined;
const hasInvocations = levels[0].invocations !== undefined;
const hasBloodMagicDie = levels[0].bloodMagicDie !== undefined;
const hasKnownMaledicts = levels[0].knownMaledicts !== undefined;
const hasNumOfSpellSlots = levels[0].numOfSpellSlots !== undefined;
const hasSpellSlotsLvl = levels[0].spellSlotsLvl !== undefined;
const maxSpellLevel = hasSpellcasting ? Math.max(...levels.map(level => 
  Object.keys(level.spellSlots || {}).reduce((max, slot) => 
    level.spellSlots?.[parseInt(slot)] ? Math.max(max, parseInt(slot)) : max, 0)
)) : 0;
---
<div class="table-container">
  <table class="class-table">
    <thead>
      <tr>
        <th class="level">Уровень</th>
        <th class="prof">БМ</th>
        <th class="features">Умения класса</th>
        {hasBardicInspiration && <th class="bardic-inspiration">Бардовское вдохновение</th>}
        {hasWildShape && <th class="wild-shape">Дикая форма</th>}
        {hasChanelDivinity && <th class="chanel-divinity">Божественный канал</th>}
        {hasCantrips && <th class="cantrips">Заговоры</th>}
        {hasPreparedSpells && <th class="prepared">Подг. закл.</th>}
        {hasRage && <th class="rage">Ярость</th>}
        {hasRageDamage && <th class="rage-damage">Урон ярости</th>}
        {hasSecondWind && <th class="second-wind">Второе дыхание</th>}
        {hasManeuvers && <th class="maneuvers">Оружейные приёмы</th>}
        {hasSneakAttack && <th class="sneak-attack">Скрытая атака</th>}
        {hasMartialArts && <th class="martial-arts">Кость боевых искусств</th>}
        {hasSpiritPoints && <th class="spirit-points">Очки духа</th>}
        {hasUnarmedMovement && <th class="unarmed-movement">Движение без доспехов</th>}
        {hasFavoredEnemy && <th class="favored-enemy">Избранный враг</th>}
        {hasSorceryPoints && <th class="sorcery-points">Очки чародейства</th>}
        {hasInvocations && <th class="invocations">Воззвания</th>}
        {hasBloodMagicDie && <th class="blood-magic-die">Кость магии крови</th>}
        {hasKnownMaledicts && <th class="known-maledicts">Известные проклятья крови</th>}
        {hasNumOfSpellSlots && <th class="num-of-spell-slots">Кол-во ячеек</th>}
        {hasSpellSlotsLvl && <th class="spell-slots-lvl">Уровень ячеек</th>}
        {hasSpellcasting && (
          <>
            <th colspan={maxSpellLevel}>Ячейки заклинаний</th>
          </>
        )}
      </tr>
      {hasSpellcasting && (
        <tr>
          <th colspan={
            // Базовые колонки: Уровень, БМ, Умения класса
            3 +
            // Добавляем 1 для каждой дополнительной колонки в зависимости от класса
            (hasBardicInspiration ? 1 : 0) +
            (hasWildShape ? 1 : 0) +
            (hasChanelDivinity ? 1 : 0) +
            (hasRage ? 1 : 0) +
            (hasRageDamage ? 1 : 0) +
            (hasSecondWind ? 1 : 0) +
            (hasManeuvers ? 1 : 0) +
            (hasSneakAttack ? 1 : 0) +
            (hasMartialArts ? 1 : 0) +
            (hasSpiritPoints ? 1 : 0) +
            (hasUnarmedMovement ? 1 : 0) +
            (hasFavoredEnemy ? 1 : 0) +
            (hasSorceryPoints ? 1 : 0) +
            (hasInvocations ? 1 : 0) +
            (hasBloodMagicDie ? 1 : 0) +
            (hasKnownMaledicts ? 1 : 0) +
            (hasNumOfSpellSlots ? 1 : 0) +
            (hasSpellSlotsLvl ? 1 : 0) +
            // Колонки, специфичные для заклинаний
            (hasCantrips ? 1 : 0) +
            1 // Колонка "Подг. закл."
          }></th>
          {Array.from({length: maxSpellLevel}, (_, i) => (
            <th>{i + 1}</th>
          ))}
        </tr>
      )}
    </thead>
    <tbody>
      {levels.map(level => (
        <tr>
          <td class="level">{level.level}</td>
          <td class="prof">{level.profBonus}</td>
          <td class="features">{level.features.join(', ')}</td>
          {hasBardicInspiration && <td class="bardic-inspiration">{level.bardicInspiration}</td>}
          {hasWildShape && <td class="wild-shape">{level.wildShape}</td>}
          {hasChanelDivinity && <td class="chanel-divinity">{level.chanelDivinity}</td>}
          {hasCantrips && <td class="cantrips">{level.cantrips}</td>}
          {hasPreparedSpells && <td class="prepared">{level.preparedSpells}</td>}
          {hasRage && <td class="rage">{level.rage}</td>}
          {hasRageDamage && <td class="rage-damage">{level.rageDamage}</td>}
          {hasSecondWind && <td class="second-wind">{level.secondWind}</td>}
          {hasManeuvers && <td class="maneuvers">{level.maneuvers}</td>}
          {hasSneakAttack && <td class="sneak-attack">{level.sneakAttack}</td>}
          {hasMartialArts && <td class="martial-arts">{level.martialArts}</td>}
          {hasSpiritPoints && <td class="spirit-points">{level.spiritPoints}</td>}
          {hasUnarmedMovement && <td class="unarmed-movement">{level.unarmedMovement}</td>}
          {hasFavoredEnemy && <td class="favored-enemy">{level.favoredEnemy}</td>}
          {hasSorceryPoints && <td class="sorcery-points">{level.sorceryPoints}</td>}
          {hasInvocations && <td class="invocations">{level.invocations}</td>}
          {hasBloodMagicDie && <td class="blood-magic-die">{level.bloodMagicDie}</td>}
          {hasKnownMaledicts && <td class="known-maledicts">{level.knownMaledicts}</td>}
          {hasNumOfSpellSlots && <td class="num-of-spell-slots">{level.numOfSpellSlots}</td>}
          {hasSpellSlotsLvl && <td class="spell-slots-lvl">{level.spellSlotsLvl}</td>}
          {hasSpellcasting && (
            <>
              {Array.from({length: maxSpellLevel}, (_, i) => (
                <td>{level.spellSlots?.[i + 1] || '—'}</td>
              ))}
            </>
          )}
        </tr>
      ))}
    </tbody>
  </table>
</div>

<style>
  .table-container {
    overflow-x: auto;
    margin: 2rem 0;
    min-width: 1000px;
    background: var(--card-bg);
    border-radius: 0.5rem;
    box-shadow: var(--card-shadow);
  }

  .class-table {
    width: 100%;
    border-collapse: collapse;
    text-align: left;
  }

  .level, .prof {
    width: 60px;
    text-align: center;
  }
  
  .rage, .rage-damage, .second-wind, .maneuvers, .sneak-attack, .bardic-inspiration, .wild-shape, .chanel-divinity, .martial-arts, .spirit-points, .unarmed-movement, .favored-enemy, .sorcery-points, .invocations, .num-of-spell-slots, .spell-slots-lvl, .blood-magic-die, .known-maledicts {
    min-width: 40px;
    text-align: center;
  }

  .features {
    min-width: 250px;
  }

  .cantrips, .prepared {
    width: 80px;
    text-align: center;
  }

  td[colspan="9"] {
    min-width: 360px;
  }

  .class-table th,
  .class-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--card-border);
    text-align: center;
  }

  .class-table td.features {
    font-size: 0.9em;
    text-align: left;
    padding-right: 2rem;
  }

  .class-table th {
    background: var(--primary);
    color: white;
  }

  .class-table th:first-child {
    border-top-left-radius: 0.5rem;
  }

  .class-table th:last-child {
    border-top-right-radius: 0.5rem;
  }

  .class-table tr:last-child td {
    border-bottom: none;
  }
</style>