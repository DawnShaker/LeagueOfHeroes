---
import AbilityVariant from './AbilityVariant.astro';
import AbilityTable from './AbilityTable.astro';

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

interface TableData {
  headers: string[];
  rows: string[][];
}

function isTableFormat(text: string | TableData): boolean {
  if (typeof text === 'object' && text.headers && text.rows) {
    return true;
  }
  const lines = String(text).split('\n');
  return lines.length > 1 && (
    lines[0].includes('Происхождение') || 
    lines[0].includes('\t') || 
    lines[0].split(/\s{2,}/).length > 1
  );
}

function splitTableDescription(text: string): { description: string; table: string } {
  const parts = text.split('\n\n');
  if (parts.length > 1 && isTableFormat(parts[parts.length - 1])) {
    return {
      description: parts.slice(0, -1).join('\n\n'),
      table: parts[parts.length - 1]
    };
  }
  return { description: '', table: text };
}

function parseTableContent(text: string | TableData): TableData {
  // If already a TableData object, return as-is
  if (typeof text === 'object' && text.headers && text.rows) {
    return text;
  }

  const lines = String(text).split('\n').filter(line => line.trim());
  
  // Check if the first line contains custom headers
  const [firstLine, ...dataLines] = lines;
  
  let headers: string[];
  let rows: string[][];

  // If the first line contains tab-separated headers
  if (firstLine.includes('\t')) {
    headers = firstLine.split('\t').map(h => h.trim());
    rows = dataLines.map(line => 
      line.split('\t').map(cell => cell.trim())
    );
  } 
  // If the first line is a default header (like "Происхождение")
  else if (firstLine.includes('Происхождение') || firstLine.includes('Origin')) {
    headers = firstLine.split(/\s{2,}/).map(h => h.trim());
    rows = dataLines.map(line => 
      line.split(/\s{2,}/).map(cell => cell.trim())
    );
  } 
  // Fallback to generic headers if no specific format is found
  else {
    headers = dataLines[0].split('\t').map((_, index) => `Column ${index + 1}`);
    rows = dataLines.map(line => 
      line.split('\t').map(cell => cell.trim())
    );
  }

  return { headers, rows };
}

function parseVariants(text: string) {
  if (!text.includes('•')) return null;
  
  const [description, variantText] = text.includes(':') ? text.split(':') : ['', text];
  
  return variantText.split('•')
    .filter(Boolean)
    .map(variant => {
      const [name, ...descParts] = variant.split('.');
      return {
        name: name.trim(),
        description: descParts.join('.').trim()
      };
    });
}

function formatBasicDescription(text: string): string {
  if (isTableFormat(text)) {
    const { description } = splitTableDescription(text);
    return description;
  } else if (text.includes('•')) {
    return text.includes(':') ? text.split(':')[0].trim() : '';
  }
  return text;
}

function formatTable(tableData: string | TableData): string {
  const { headers, rows } = parseTableContent(tableData);
  
  return `
    <div class="table-container">
      <table>
        <thead>
          <tr>
            ${headers.map(h => `<th>${h}</th>`).join('')}
          </tr>
        </thead>
        <tbody>
          ${rows.map(row => `
            <tr>
              ${row.map(cell => `<td>${cell}</td>`).join('')}
            </tr>
          `).join('')}
        </tbody>
      </table>
    </div>
  `;
}

const variants = parseVariants(description);
const basicDescription = formatBasicDescription(description);
const { table } = isTableFormat(description) ? splitTableDescription(description) : { table: '' };

const isTableData = typeof description === 'object' && description.headers && description.rows;
---

<div class="species-ability">
  <h3 class="ability-title">{title}</h3>
  {basicDescription && (
    <div class="ability-description">
      {description.split('\n').map(line => {
        if (line.startsWith('- ')) {
          return <li>{line.substring(2)}</li>
        } else if (line.trim()) {
          return <p>{line}</p>
        }
        return null;
      })}
    </div>
  )}
  
  {(table || isTableData) && (
    <div class="table-container" data-ability-title={title}>
      <Fragment set:html={formatTable(isTableData ? description : table)} />
    </div>
  )}

  {variants && (
    <div class="variants">
      {variants.map(variant => (
        <AbilityVariant name={variant.name} description={variant.description} />
      ))}
    </div>
  )}
</div>

<style>
  .species-ability {
    padding: 1rem;
    border-top: 1px solid var(--card-border);
  }

  .ability-title {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }

  .ability-description {
    line-height: 1.6;
  }

  .ability-description p {
    margin-bottom: 0.75rem;
  }

  .ability-description p:last-child {
    margin-bottom: 0;
  }

  .ability-description li {
    margin-left: 1.5rem;
    margin-bottom: 0.5rem;
    list-style-type: disc;
  }

  .ability-description li:last-child {
    margin-bottom: 0;
  }

  .variants {
    margin-top: 1rem;
  }

  :global(.table-container) {
    margin: 1rem 0;
    overflow-x: auto;
  }

  :global(.table-container table) {
    width: 100%;
    border-collapse: collapse;
  }

  :global(.table-container th),
  :global(.table-container td) {
    padding: 0.75rem;
    border: 1px solid var(--card-border);
    text-align: left;
  }

  :global(.table-container th) {
    background: var(--background);
    font-weight: 600;
  }

  :global(.table-container tr:nth-child(even)) {
    background: var(--background);
  }
</style>